/* vim: set ft=terraform : */

# terraform ec2 aws_instance template
resource "aws_instance" "this" {
  ami                  = var.ami
  instance_type        = var.instance_type
  cpu_core_count       = var.cpu_core_count
  cpu_threads_per_core = var.cpu_threads_per_core
  hibernation          = var.hibernation

  user_data                   = var.user_data
  user_data_base64            = var.user_data_base64
  user_data_replace_on_change = var.user_data_replace_on_change

  availability_zone      = var.availability_zone
  subnet_id              = var.subnet_id
  vpc_security_group_ids = var.vpc_security_group_ids

  key_name             = var.key_name
  monitoring           = var.monitoring
  get_password_data    = var.get_password_data
  iam_instance_profile = aws_iam_instance_profile.this.name

  associate_public_ip_address = var.associate_public_ip_address
  private_ip                  = var.private_ip
  secondary_private_ips       = var.secondary_private_ips
  ipv6_address_count          = var.ipv6_address_count
  ipv6_addresses              = var.ipv6_addresses

  ebs_optimized = var.ebs_optimized

  root_block_device {
    delete_on_termination = try(root_block_device.value.delete_on_termination, null)
    encrypted             = try(root_block_device.value.encrypted, null)
    iops                  = try(root_block_device.value.iops, null)
    kms_key_id            = lookup(root_block_device.value, "kms_key_id", null)
    volume_size           = try(root_block_device.value.volume_size, null)
    volume_type           = try(root_block_device.value.volume_type, null)
    throughput            = try(root_block_device.value.throughput, null)
    tags                  = try(root_block_device.value.tags, null)
  }

  ebs_block_device {
    delete_on_termination = try(ebs_block_device.value.delete_on_termination, null)
    device_name           = ebs_block_device.value.device_name
    encrypted             = try(ebs_block_device.value.encrypted, null)
    iops                  = try(ebs_block_device.value.iops, null)
    kms_key_id            = lookup(ebs_block_device.value, "kms_key_id", null)
    snapshot_id           = lookup(ebs_block_device.value, "snapshot_id", null)
    volume_size           = try(ebs_block_device.value.volume_size, null)
    volume_type           = try(ebs_block_device.value.volume_type, null)
    throughput            = try(ebs_block_device.value.throughput, null)
    tags                  = try(ebs_block_device.value.tags, null)
  }

  ephemeral_block_device {
    device_name  = ephemeral_block_device.value.device_name
    no_device    = try(ephemeral_block_device.value.no_device, null)
    virtual_name = try(ephemeral_block_device.value.virtual_name, null)
  }

  metadata_options {
    http_endpoint               = try(metadata_options.value.http_endpoint, "enabled")
    http_tokens                 = try(metadata_options.value.http_tokens, "optional")
    http_put_response_hop_limit = try(metadata_options.value.http_put_response_hop_limit, 1)
    instance_metadata_tags      = try(metadata_options.value.instance_metadata_tags, null)
  }

  network_interface {
    device_index          = network_interface.value.device_index
    network_interface_id  = lookup(network_interface.value, "network_interface_id", null)
    delete_on_termination = try(network_interface.value.delete_on_termination, false)
  }

  launch_template {
    id      = lookup(var.launch_template, "id", null)
    name    = lookup(var.launch_template, "name", null)
    version = lookup(var.launch_template, "version", null)
  }

  maintenance_options {
    auto_recovery = try(maintenance_options.value.auto_recovery, null)
  }

  enclave_options {
    enabled = var.enclave_options_enabled
  }

  source_dest_check                    = length(var.network_interface) > 0 ? null : var.source_dest_check
  disable_api_termination              = var.disable_api_termination
  disable_api_stop                     = var.disable_api_stop
  instance_initiated_shutdown_behavior = var.instance_initiated_shutdown_behavior
  placement_group                      = var.placement_group
  tenancy                              = var.tenancy
  host_id                              = var.host_id

  credit_specification {
    cpu_credits = local.is_t_instance_type ? var.cpu_credits : null
  }

  timeouts {
    create = try(var.timeouts.create, null)
    update = try(var.timeouts.update, null)
    delete = try(var.timeouts.delete, null)
  }

  tags        = merge({ "Name" = var.name }, var.tags)
  volume_tags = var.enable_volume_tags ? merge({ "Name" = var.name }, var.volume_tags) : null
}
-----
